user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

rtmp { 
# Camera 1
    server { 
        listen 1935;
 
        # Start the motion sensing process
        exec_static motion -l /home/www-data/motion-log/motion.log;

        # Camera 1
        application live { 
            live on; 
	    
            exec_options on; 
            exec_static ffmpeg -re -rtsp_transport tcp -i rtsp://192.168.0.30:554/11 -c copy -c:a aac -b:a 160k -ar 44100 -f flv rtmp://localhost/live/porch;
            
            #record all;
            #record_path /home/www-data/hls;
            #record_unique on;
            #record_suffix -%d-%b-%y-%T.flv;
            #record_interval 2m; 

            # Run the script to create the video on demand files from the recording file, then delete the recording file and delete the oldest VOD files
            exec_record_done /home/www-data/processrecordings.sh $path $dirname/$basename_.m3u8 $dirname $basename; 
            
            interleave on;

            hls on; 
            hls_path /tmp/hls; 
            hls_fragment 15s; 

	   #dash on;
           #dash_path /tmp/dash;
           #dash_fragment 15s;

        recorder live_rec {
            record all;
            record_unique on;
            record_path /home/www-data/hls;
            record_suffix .flv;
            record_interval 2m; 
            #record_max_size 2m;
            }  
        }

        # Camera 1 low resolution/bitrate
        application livelo {
            live on;

            exec_options on;
            exec_static ffmpeg -re -rtsp_transport tcp -i rtsp://192.168.0.30:554/12 -c copy -c:a aac -b:a 160k -ar 44100 -f flv rtmp://localhost/livelo/porch;

            # Run the script to create the video on demand files from the recording file, then delete the recording file and delete the oldest VOD files
            exec_record_done /home/www-data/processrecordings.sh $path $dirname/$basename_.m3u8 $dirname $basename;

            interleave on;

            hls on;
            hls_path /tmp/hlslo;
            hls_fragment 15s;

        recorder livelo_rec {
            record all;
            record_unique on;
            record_path /home/www-data/hlslo;
            record_suffix .flv;
            record_interval 2m;
            #record_max_size 2m;
            }
        }

	# Camera 2
        application live2 {
            live on;

            exec_options on;
            exec_static ffmpeg -re -rtsp_transport tcp -i rtsp://192.168.0.34:554/11 -c copy -c:a aac -b:a 160k -ar 44100 -f flv rtmp://localhost/live2/cam2;
            # Run the script to create the video on demand files from the recording file, then delete the recording file and delete the oldest VOD files
            exec_record_done /home/www-data/processrecordings.sh $path $dirname/$basename_.m3u8 $dirname $basename;

            interleave on;

            hls on;
            hls_path /tmp/hls2;
            hls_fragment 15s;

           #dash on;
           #dash_path /tmp/dash;
           #dash_fragment 15s;

        recorder live_rec {
            record all;
            record_unique on;
            record_path /home/www-data/hls2;
            record_suffix .flv;
            record_interval 2m;
            #record_max_size 2m;
            }
        }
 
	# Camera 2 low resolution
        application live2lo {
            live on;

            exec_options on;
            exec_static ffmpeg -re -rtsp_transport tcp -i rtsp://192.168.0.34:554/12 -c copy -c:a aac -b:a 160k -ar 44100 -f flv rtmp://localhost/live2lo/cam2;
            # Run the script to create the video on demand files from the recording file, then delete the recording file and delete the oldest VOD files
            exec_record_done /home/www-data/processrecordings.sh $path $dirname/$basename_.m3u8 $dirname $basename;

            interleave on;

            hls on;
            hls_path /tmp/hls2lo;
            hls_fragment 15s;

        recorder live_rec {
            record all;
            record_unique on;
            record_path /home/www-data/hls2lo;
            record_suffix .flv;
            record_interval 2m;
            #record_max_size 2m;
            }
        }
       
    }
}

http { 
   # default_type application/octet-stream;
   include /etc/nginx/mime.types;
 
    server {
        listen 80; 
    
       location /recording/ {
          autoindex on;
          alias /home/www-data/;
         # index index.html;
         # try_files $uri $uri/ =404;
       }

        location /tomcat/ {
             proxy_pass http://localhost:8080/;
        }
       
       location / { 

            add_header "Access-Control-Allow-Origin"  "*" always;

            root /tmp; 
        }

    }
 
#    types {
#        application/vnd.apple.mpegurl m3u8;
#        video/mp2t ts;
#        text/html html;
#       # application/dash+xml mpd;
#    } 
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
