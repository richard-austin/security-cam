#!/bin/bash

cp /tmp/motion.conf /etc/motion
cp -r /tmp/conf.d /home/security-cam/motion
mv /tmp/nginx.conf /etc/nginx
mv /tmp/ssmtp.conf /etc/ssmtp
mv /tmp/chrony.conf /etc/chrony
mv /tmp/server.xml /etc/tomcat9/
mv /tmp/tomcat-users.xml /etc/tomcat9
mv /tmp/server-0.1.war /var/lib/tomcat9/webapps/ROOT.war
rm -r /var/lib/tomcat9/webapps/ROOT

rm -r /tmp/conf.d /tmp/motion.conf
deb-systemd-invoke stop tomcat9.service  # Stop tomcat before
useradd sec-cam
groupadd security-cam
usermod -a -G video tomcat
usermod -a -G security-cam tomcat
usermod -a -G security-cam sec-cam
usermod -a -G security-cam www-data

chown -R sec-cam:security-cam /home/security-cam

chown tomcat:security-cam /home/security-cam/logs/security-cam.log*  # To prevent access denied errors on first starting tomcat
chown tomcat:tomcat /var/lib/tomcat9/webapps/ROOT.war
chmod 640 /etc/tomcat9/tomcat-users.xml
chown root:tomcat /etc/tomcat9/tomcat-users.xml
chmod 640 /etc/tomcat9/server.xml
chown root:tomcat /etc/tomcat9/server.xml
chown root:mail /etc/ssmtp/ssmtp.conf
chmod 640 /etc/ssmtp/ssmtp.conf

#A new group, security-cam, is added, then the users tomcat and sec-cam added to that group.
# The security-cam group is then given group access to sec-cam and it's subdirectories. The user and group permissions are then set up.

# Give directories only permission 775
find /home/security-cam -type d -print0 | xargs -0 chmod 775
# Give files permission 664
find /home/security-cam -type f -print0 | xargs -0 chmod 664
# Make sure sc_processes.sh is executable if present and set ownership to tomcat
chmod +x /home/security-cam/sc_processes.sh || true
chown tomcat:tomcat /home/security-cam/sc_processes.sh || true

# Copy install-cert.sh and sc_processes.sh with executable attribs unaffected by previous command
mv /tmp/install-cert.sh /home/security-cam/
chown root:root /home/security-cam/install-cert.sh

chgrp -R security-cam /home/security-cam/
chown sec-cam:adm /var/log/motion

# Start the services
deb-systemd-invoke stop motion   ## It will be run under nginx
deb-systemd-invoke disable motion
systemctl daemon-reload
deb-systemd-invoke enable tomcat9.service
deb-systemd-invoke start tomcat9.service
deb-systemd-invoke enable nginx.service

CERT_FILE=/etc/nginx/security-cam.crt
if test -f "$CERT_FILE"; then
   deb-systemd-invoke start nginx.service
else
   deb-systemd-invoke stop nginx.service  # On initial install, the certificate won't be present so
                                          # stop
                                          # nginx as it can't work till that is set up.
   echo "To add or update the site key/certificate, run sudo install-cert.sh at www-root."
   echo "Use sudo systemctl start nginx to run nginx."
fi

# Let chrony use the updated conf file
deb-systemd-invoke stop chrony
deb-systemd-invoke start chrony

# This runs the node media server, motion and the ffmpeg instances
# deb-systemd-invoke enable sc_processes.service
# deb-systemd-invoke start sc_processes.service

