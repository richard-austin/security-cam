#!/bin/bash

cp /tmp/motion.conf /etc/motion
mv /tmp/nginx.conf /etc/nginx
mv /tmp/ssmtp.conf /etc/ssmtp
mv /tmp/chrony.conf /etc/chrony
mv /tmp/server.xml /etc/tomcat9/
mv /tmp/tomcat9 /etc/default/  # Updated tomcat9 default file to enable use of Java 17
mv /tmp/tomcat-users.xml /etc/tomcat9
mv /tmp/server-7.3.war /var/lib/tomcat9/webapps/ROOT.war
rm -r /var/lib/tomcat9/webapps/ROOT

rm -r /tmp/motion.conf
deb-systemd-invoke stop tomcat9.service  # Stop tomcat before making changes
deb-systemd-invoke stop motion  # And motion
sleep 2

useradd sec-cam
groupadd security-cam
usermod -a -G video tomcat
usermod -a -G security-cam tomcat
usermod -a -G security-cam sec-cam
usermod -a -G security-cam www-data

chown -R tomcat:security-cam /etc/security-cam
chown -R tomcat:security-cam /var/security-cam

chown tomcat:security-cam /var/log/security-cam/security-cam.log*  # To prevent access denied errors on first starting tomcat
chown tomcat:tomcat /var/lib/tomcat9/webapps/ROOT.war
chmod 640 /etc/tomcat9/tomcat-users.xml
chown root:tomcat /etc/tomcat9/tomcat-users.xml
chmod 640 /etc/tomcat9/server.xml
chown root:tomcat /etc/tomcat9/server.xml
chown root:mail /etc/ssmtp/ssmtp.conf
chmod 640 /etc/ssmtp/ssmtp.conf
chown root:security-cam /etc/security-cam/cacert.jks /etc/security-cam/client.jks
chmod 440 /etc/security-cam/cacert.jks /etc/security-cam/client.jks
chown root:root /etc/security-cam/wifi-setup-service/*.py

#A new group, security-cam, is added, then the users tomcat and sec-cam added to that group.
# The security-cam group is then given group access to sec-cam and it's subdirectories. The user and group permissions are then set up.

# Give directories only permission 775
find /etc/security-cam -type d -print0 | xargs -0 chmod 775
# Give files permission 664
find /etc/security-cam -type f -print0 | xargs -0 chmod 664

# Copy install-cert.sh with executable attribs unaffected by previous command
mv /tmp/install-cert.sh /etc/security-cam/
chown root:root /etc/security-cam/install-cert.sh

chgrp -R security-cam /etc/security-cam/
chown sec-cam:security-cam /var/log/motion
chown tomcat:security-cam /var/log/security-cam
chown tomcat:security-cam /var/log/camera-recordings-service
chown tomcat:security-cam /var/lib/tomcat

chmod +x /etc/security-cam/start_hd_recording.sh || true
chmod +x /etc/security-cam/end_hd_recording.sh || true
chmod +x /etc/security-cam/processmotionrecordings.sh || true
chmod +x /etc/security-cam/productKeyGen.sh || true

pushd /etc/security-cam/camera-recordings-service || true
sudo -u tomcat pip install -r requirements.txt

#pushd /etc/security-cam/wifi-setup-service || true
#pip install -r requirements.txt
#popd || true
#popd || true


# Change the motion service user to tomcat
sed -i 's/User=motion/User=tomcat/' /lib/systemd/system/motion.service

#
# AddToTomcatUnitFileIfNotPresent: Add ReadWriteFilePaths to the tomcat unit file to enable access to /etc/security-cam
#                                  and /var/log/security-cam.
#
AddToTomcatUnitFileIfNotPresent() {
  lineToWrite=$1
  lineToWriteUnder=$2
  unitFile=$3
  # Enter lineToWrite after lineToWriteUnder if not already present
  if ! grep "$lineToWrite" "$unitFile"; then
    # Add the line after lineToWriteUnder escaping all '/' as the regex is within / delimiters.
    result=$(awk '/'"${lineToWriteUnder//\//\\/}"'/ { print; print '\""${lineToWrite}"\"'; next }1' "$unitFile")
    echo "$result" >"$unitFile"
  fi
}

# Give tomcat permission to write to some additional directories
lineToWrite="ReadWritePaths=/var/log/security-cam/"
lineToWrite2="ReadWritePaths=/etc/security-cam/"
lineToWrite3="ReadWritePaths=/var/security-cam/"
lineToWriteUnder="ReadWritePaths=/var/lib/tomcat9/webapps/"
unitFile="/usr/lib/systemd/system/tomcat9.service"

AddToTomcatUnitFileIfNotPresent $lineToWrite $lineToWriteUnder $unitFile
AddToTomcatUnitFileIfNotPresent $lineToWrite2 $lineToWriteUnder $unitFile
AddToTomcatUnitFileIfNotPresent $lineToWrite3 $lineToWriteUnder $unitFile

systemctl daemon-reload  # Register the motion service file change

# Start the services
deb-systemd-invoke enable motion
deb-systemd-invoke start motion
deb-systemd-invoke enable nginx.service

deb-systemd-invoke enable wifimanagement.service
deb-systemd-invoke start wifimanagement.service
deb-systemd-invoke enable camera-recordings.service
deb-systemd-invoke start camera-recordings.service

CERT_FILE=/etc/nginx/security-cam.crt
if test -f "$CERT_FILE"; then
   deb-systemd-invoke start nginx.service
else
   deb-systemd-invoke stop nginx.service  # On initial install, the certificate won't be present so
                                          # stop
                                          # nginx as it can't work till that is set up.
   echo "To add or update the site key/certificate, run sudo install-cert.sh at www-root."
   echo "Use sudo systemctl start nginx to run nginx."
fi

# Let chrony use the updated conf file
deb-systemd-invoke stop chrony
deb-systemd-invoke start chrony

deb-systemd-invoke enable tomcat9.service
deb-systemd-invoke start tomcat9.service

# Generate the product key if it does not already exist
cd /etc/security-cam/ || exit
./productKeyGen.sh
