plugins {
    id 'groovy'
    id 'war'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id("com.github.erdi.webdriver-binaries") version "3.2"
}

group = "server"
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.groovy:groovy'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.3.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.2'

    runtimeOnly 'com.h2database:h2'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-core:6.3.3'
    implementation 'org.springframework.security:spring-security-web:6.3.3'
    implementation 'org.springframework.security:spring-security-config:6.3.3'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'org.springframework.security:spring-security-crypto:6.3.3'
    implementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version: '1.0.0'
    // https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:3.3.2'

}

bootRun {
    jvmArgs('-Dspring.profiles.active=dev')
}

tasks.named('test') {
    useJUnitPlatform()
}

//assetCompile.dependsOn(':server:setVersion')
bootWar.dependsOn(':client:buildClient',':server:setVersion')

bootWar {
    webInf {
        from('../client/dist/client/browser')
        include '**/*'
        into('classes/static')
    }
}

tasks.register('setVersion', Exec) {
    group = 'build'
    description = 'Sets the version.txt file with the current version from git describe'
    workingDir "$projectDir"
    executable "sh"
    args = ['-c', 'mkdir -p version && git describe --tags --dirty | tr -d \'\\n\' > version/version.txt']
}

tasks.register('buildDebFile', Exec) {
    group='build'
    dependsOn([':server:assemble', ':generateProductKey:uberJar', ':fmp4-ws-media-server:deploy', ':initialAdmin:buildWar'])
    group = 'build'
    workingDir "$projectDir/../xtrn-scripts-and-config/deb-file-creation"
    commandLine './create-deb.sh'
}

//tasks.withType(Copy) {
//    duplicatesStrategy = DuplicatesStrategy.INHERIT
//}

tasks.withType(GroovyCompile).configureEach {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

webdriverBinaries {
    chromedriver {
        versionRegexp = '.*'  // Use latest version
    }

    geckodriver '0.24.0'
    edgedriver '86.0.601.0'
}

tasks.withType(Test).configureEach {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

//assets {
//    minifyJs = true
//    minifyCss = true
//}
