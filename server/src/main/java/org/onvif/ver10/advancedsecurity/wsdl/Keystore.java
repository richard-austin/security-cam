package org.onvif.ver10.advancedsecurity.wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * Basic keystore functionality.
 *
 * This class was generated by Apache CXF 3.3.2
 * Generated source version: 3.3.2
 *
 */
@WebService(targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", name = "Keystore")
@XmlSeeAlso({ObjectFactory.class})
public interface Keystore {

    /**
     * This operation returns information about all keys that are stored in the device’s keystore.
     * 
     * This operation may be used, e.g., if a client lost track of which keys are present on the
     * device.
     * If no key is stored on the device, an empty list is returned.
     *       
     */
    @WebMethod(operationName = "GetAllKeys", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllKeys")
    @RequestWrapper(localName = "GetAllKeys", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllKeys")
    @ResponseWrapper(localName = "GetAllKeysResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllKeysResponse")
    @WebResult(name = "KeyAttribute", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<org.onvif.ver10.advancedsecurity.wsdl.KeyAttribute> getAllKeys()
;

    /**
     * This operation returns information about all passphrases that are stored in the keystore of
     * the device.
     * This operation may be used, e.g., if a client lost track of which passphrases are present on
     * the device.
     * If no passphrase is stored on the device, the device shall return an empty list.
     *       
     */
    @WebMethod(operationName = "GetAllPassphrases", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllPassphrases")
    @RequestWrapper(localName = "GetAllPassphrases", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllPassphrases")
    @ResponseWrapper(localName = "GetAllPassphrasesResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllPassphrasesResponse")
    @WebResult(name = "PassphraseAttribute", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<org.onvif.ver10.advancedsecurity.wsdl.PassphraseAttribute> getAllPassphrases()
;

    /**
     * This operation returns a specific certificate revocation list (CRL) from the keystore on the
     * device.
     * Certification revocation lists are uniquely identified using CRLIDs. If no CRL is stored
     * under the requested CRLID, the device shall produce a CRLID fault.
     *       
     */
    @WebMethod(operationName = "GetCRL", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCRL")
    @RequestWrapper(localName = "GetCRL", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCRL")
    @ResponseWrapper(localName = "GetCRLResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCRLResponse")
    @WebResult(name = "Crl", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public org.onvif.ver10.advancedsecurity.wsdl.CRL getCRL(

        @WebParam(name = "CrlID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String crlID
    );

    /**
     * This operation creates a sequence of certificates that may be used, e.g., for certification
     * path validation or for TLS server authentication.
     * 
     * Certification paths are uniquely identified using certification path IDs. Certificates are
     * uniquely identified using certificate IDs.
     * A certification path contains a sequence of certificate IDs.
     * If there is a certificate ID in the sequence of supplied certificate IDs for which no
     * certificate exists in the device’s keystore, the corresponding fault shall be produced
     * and no certification path shall be created.
     * 
     * 
     * The signature of each certificate in the certification path except for the last one must be
     * verifiable with the public key contained in the next certificate in the path.
     * If there is a certificate ID in the request other than the last ID for which the
     * corresponding certificate cannot be verified with the public key in the certificate
     * identified
     * by the next certificate ID, an InvalidCertificateChain fault shall be produced and no
     * certification path shall be created.
     *       
     */
    @WebMethod(operationName = "CreateCertificationPath", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateCertificationPath")
    @RequestWrapper(localName = "CreateCertificationPath", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateCertificationPath")
    @ResponseWrapper(localName = "CreateCertificationPathResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateCertificationPathResponse")
    @WebResult(name = "CertificationPathID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String createCertificationPath(

        @WebParam(name = "CertificateIDs", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.CertificateIDs certificateIDs,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias
    );

    /**
     * This operation returns all certification path validation policies that are stored in the
     * keystore on the device.
     * If no certification path validation policy is stored in the device’s keystore, an empty list
     * is returned.
     *       
     */
    @WebMethod(operationName = "GetAllCertPathValidationPolicies", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCertPathValidationPolicies")
    @RequestWrapper(localName = "GetAllCertPathValidationPolicies", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertPathValidationPolicies")
    @ResponseWrapper(localName = "GetAllCertPathValidationPoliciesResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertPathValidationPoliciesResponse")
    @WebResult(name = "CertPathValidationPolicy", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<org.onvif.ver10.advancedsecurity.wsdl.CertPathValidationPolicy> getAllCertPathValidationPolicies()
;

    /**
     * This operation generates a DER-encoded PKCS#10 v1.7 certification request (sometimes also
     * called certificate signing request or CSR) as specified in RFC 2986
     * for a public key on the device.
     * 
     * The key pair that contains the public key for which a certification request shall be
     * produced is specified by its key ID.
     * If no key is stored under the requested KeyID or the key specified by the requested KeyID is
     * not an asymmetric key pair, an invalid key ID fault shall be produced and
     * no CSR shall be generated.
     * 
     * 
     * A device that supports this command shall as minimum support the sha-1WithRSAEncryption
     * signature algorithm as specified in RFC 3279.
     * If the specified signature algorithm is not supported by the device, an
     * UnsupportedSignatureAlgorithm fault shall be produced and no CSR shall be generated.
     * 
     * 
     * If the public key identified by the requested Key ID is an invalid input to the specified
     * signature algorithm, a KeySignatureAlgorithmMismatch fault shall be produced
     * and no CSR shall be generated.
     * If the key pair does not have status ok, a device shall produce an InvalidKeyStatus fault
     * and no CSR shall be generated.
     *       
     */
    @WebMethod(operationName = "CreatePKCS10CSR", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/CreatePKCS10CSR")
    @RequestWrapper(localName = "CreatePKCS10CSR", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreatePKCS10CSR")
    @ResponseWrapper(localName = "CreatePKCS10CSRResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreatePKCS10CSRResponse")
    @WebResult(name = "PKCS10CSR", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public byte[] createPKCS10CSR(

        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.DistinguishedName subject,
        @WebParam(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyID,
        @WebParam(name = "CSRAttribute", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.util.List<org.onvif.ver10.advancedsecurity.wsdl.CSRAttribute> csrAttribute,
        @WebParam(name = "SignatureAlgorithm", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.AlgorithmIdentifier signatureAlgorithm
    );

    /**
     * This operation uploads a key pair in a PKCS#8 data structure as specified in [RFC 5958, RFC
     * 5959].
     * 
     * If an encryption passphrase ID is supplied in the request, the device shall assume that the
     * KeyPair parameter contains an EncryptedPrivateKeyInfo ASN.1
     * structure that is encrypted under the passphrase in the keystore that corresponds to the
     * supplied ID, where the EncryptedPrivateKeyInfo structure contains
     * both the private key and the corresponding public key. If no encryption passphrase ID is
     * supplied, the device shall assume that the KeyPair parameter contains a
     * OneAsymmetricKey ASN.1 structure which contains both the private key and the corresponding
     * public key.
     *       
     */
    @WebMethod(operationName = "UploadKeyPairInPKCS8", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadKeyPairInPKCS8")
    @RequestWrapper(localName = "UploadKeyPairInPKCS8", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadKeyPairInPKCS8")
    @ResponseWrapper(localName = "UploadKeyPairInPKCS8Response", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadKeyPairInPKCS8Response")
    @WebResult(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String uploadKeyPairInPKCS8(

        @WebParam(name = "KeyPair", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        byte[] keyPair,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(name = "EncryptionPassphraseID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String encryptionPassphraseID,
        @WebParam(name = "EncryptionPassphrase", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String encryptionPassphrase
    );

    /**
     * This operation uploads an X.509 certificate as specified by [RFC 5280] in DER encoding and
     * the public key in the certificate to a device’s keystore.
     * 
     * A device that supports this command shall be able to handle X.509v3 certificates as
     * specified in RFC 5280 and may additionally be able to handle other X.509 certificate formats
     * as indicated by the X.509Versions capability.
     * A device that supports this command shall support sha1-WithRSAEncryption as certificate
     * signature algorithm.
     * 
     * 
     * Certificates are uniquely identified using certificate IDs, and key pairs are uniquely
     * identified using key IDs.
     * The device shall generate a new certificate ID for the uploaded certificate.
     * 
     * Certain certificate usages, e.g. TLS server authentication, require the private key that
     * corresponds to the public key in the certificate to be present in the keystore.
     * In such cases, the client may indicate that it expects the device to produce a fault if the
     * matching private key for
     * the uploaded certificate is not present in the keystore by setting the PrivateKeyRequired
     * argument in the upload request to true.
     * 
     * 
     * The uploaded certificate has to be linked to a key pair in the keystore.
     * If no private key is required for the public key in the certificate and a key pair exists in
     * the keystore with a public key equal to the public key in the certificate,
     * the uploaded certificate is linked to the key pair identified by the supplied key ID by
     * adding a reference from the certificate to the key pair.
     * If no private key is required for the public key in the certificate and no key pair exists
     * with the public key equal to the public key in the certificate,
     * a new key pair with status ok is created with the public key from the certificate, and this
     * key pair is linked to the uploaded certificate by adding a reference from
     * the certificate to the key pair.
     * If a private key is required for the public key in the certificate, and a key pair exists in
     * the keystore with a private key that matches the public key in the certificate,
     * the uploaded certificate is linked to this keypair by adding a reference from the
     * certificate to the key pair.
     * If a private key is required for the public key and no such keypair exists in the keystore,
     * the NoMatchingPrivateKey fault shall be produced and the certificate
     * shall not be stored in the keystore.
     * If the key pair that the certificate shall be linked to does not have status ok, an
     * InvalidKeyID fault is produced, and the uploaded certificate is not stored in the keystore.
     * If the device cannot process the uploaded certificate, a BadCertificate fault is produced
     * and neither the uploaded certificate nor the public key are stored in the device’s keystore.
     * The BadCertificate fault shall not be produced based on the mere fact that the device’s
     * current time lies outside the interval defined by the notBefore and notAfter fields as
     * specified by [RFC 5280], Sect. 4.1 .
     * This operation shall not mark the uploaded certificate as trusted.
     * 
     * 
     * If the device does not have not enough storage capacity for storing the certificate to be
     * uploaded, the maximum number of certificates reached fault shall be produced
     * and no certificate shall be uploaded.
     * If the device does not have not enough storage capacity for storing the key pair that
     * eventually has to be created, the device shall generate a maximum number of keys reached
     * fault.
     * Furthermore the device shall not generate a key pair and no certificate shall be stored.
     *       
     */
    @WebMethod(operationName = "UploadCertificate", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadCertificate")
    @RequestWrapper(localName = "UploadCertificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCertificate")
    @ResponseWrapper(localName = "UploadCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCertificateResponse")
    public void uploadCertificate(

        @WebParam(name = "Certificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        byte[] certificate,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(name = "KeyAlias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyAlias,
        @WebParam(name = "PrivateKeyRequired", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.Boolean privateKeyRequired,
        @WebParam(mode = WebParam.Mode.OUT, name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<java.lang.String> certificateID,
        @WebParam(mode = WebParam.Mode.OUT, name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<java.lang.String> keyID
    );

    /**
     * This operation uploads a certificate revocation list (CRL) as specified in [RFC 5280] to the
     * keystore on the device.
     * If the device does not have enough storage space to store the CRL to be uploaded, the device
     * shall produce a MaximumNumberOfCRLsReached fault and shall not store the supplied CRL.
     * If the device is not able to process the supplied CRL, the device shall produce a BadCRL
     * fault and shall not store the supplied CRL.
     * If the device does not support the signature algorithm that was used to sign the supplied
     * CRL, the device shall produce an UnsupportedSignatureAlgorithm fault and shall not store the
     * supplied CRL.
     *       
     */
    @WebMethod(operationName = "UploadCRL", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadCRL")
    @RequestWrapper(localName = "UploadCRL", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCRL")
    @ResponseWrapper(localName = "UploadCRLResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCRLResponse")
    @WebResult(name = "CrlID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String uploadCRL(

        @WebParam(name = "Crl", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        byte[] crl,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(name = "anyParameters", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.UploadCRL.AnyParameters anyParameters
    );

    /**
     * This operation deletes a certification path from the device’s keystore.
     * 
     * This operation shall not delete the certificates that are referenced by the certification
     * path.
     * Certification paths are uniquely identified using certification path IDs.
     * If no certification path is stored under the requested certification path ID in the
     * keystore, an InvalidArgVal fault is produced.
     * If there is a certification path under the requested certification path ID stored in the
     * keystore and the certification path could not be deleted,
     * a CertificationPathDeletion fault is produced.
     * If a reference exists for the specified certification path, the certification path shall not
     * be deleted and the corresponding fault shall be produced.
     * After a certification path is successfully deleted, the device may assign its former ID to
     * other certification paths.
     *       
     */
    @WebMethod(operationName = "DeleteCertificationPath", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCertificationPath")
    @RequestWrapper(localName = "DeleteCertificationPath", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertificationPath")
    @ResponseWrapper(localName = "DeleteCertificationPathResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertificationPathResponse")
    public void deleteCertificationPath(

        @WebParam(name = "CertificationPathID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certificationPathID
    );

    /**
     * This operation deletes a certificate from the device’s keystore.
     * 
     * The operation shall not delete the public key that is contained in the certificate from the
     * keystore.
     * Certificates are uniquely identified using certificate IDs. If no certificate is stored
     * under the requested certificate ID in the keystore, an InvalidArgVal fault is produced.
     * If there is a certificate under the requested certificate ID stored in the keystore and the
     * certificate could not be deleted, a CertificateDeletion fault is produced.
     * If a reference exists for the specified certificate, the certificate shall not be deleted
     * and the corresponding fault shall be produced.
     * After a certificate has been successfully deleted, the device may assign its former ID to
     * other certificates.
     *       
     */
    @WebMethod(operationName = "DeleteCertificate", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCertificate")
    @RequestWrapper(localName = "DeleteCertificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertificate")
    @ResponseWrapper(localName = "DeleteCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertificateResponse")
    public void deleteCertificate(

        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certificateID
    );

    /**
     * This operation returns the status of a key.
     * 
     * Keys are uniquely identified using key IDs. If no key is stored under the requested key ID
     * in the keystore, an InvalidKeyID fault is produced.
     * Otherwise, the status of the key is returned.
     *       
     */
    @WebMethod(operationName = "GetKeyStatus", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetKeyStatus")
    @RequestWrapper(localName = "GetKeyStatus", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetKeyStatus")
    @ResponseWrapper(localName = "GetKeyStatusResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetKeyStatusResponse")
    @WebResult(name = "KeyStatus", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String getKeyStatus(

        @WebParam(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyID
    );

    /**
     * This operation triggers the asynchronous generation of an RSA key pair of a particular key
     * length (specified as the number of bits) as specified in [RFC 3447], with a suitable key
     * generation mechanism on the device.
     * Keys, especially RSA key pairs, are uniquely identified using key IDs.
     * 
     * If the device does not have not enough storage capacity for storing the key pair to be
     * created, the maximum number of keys reached fault shall be produced and no key pair shall be
     * generated.
     * Otherwise, the operation generates a keyID for the new key and associates the generating
     * status to it.
     * 
     * Immediately after key generation has started, the device shall return the keyID to the
     * client and continue to generate the key pair.
     * The client may query the device with the GetKeyStatus operation whether the generation has
     * finished.
     * The client may also subscribe to Key Status events to be notified about key status changes.
     * 
     * The device also returns a best-effort estimate of how much time it requires to create the
     * key pair.
     * A client may use this information as an indication how long to wait before querying the
     * device whether key generation is completed.
     * 
     * After the key has been successfully created, the device shall assign it the ok status. If
     * the key generation fails, the device shall assign the key the corrupt status.
     *       
     */
    @WebMethod(operationName = "CreateRSAKeyPair", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateRSAKeyPair")
    @RequestWrapper(localName = "CreateRSAKeyPair", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateRSAKeyPair")
    @ResponseWrapper(localName = "CreateRSAKeyPairResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateRSAKeyPairResponse")
    public void createRSAKeyPair(

        @WebParam(name = "KeyLength", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.math.BigInteger keyLength,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(mode = WebParam.Mode.OUT, name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<java.lang.String> keyID,
        @WebParam(mode = WebParam.Mode.OUT, name = "EstimatedCreationTime", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<javax.xml.datatype.Duration> estimatedCreationTime
    );

    /**
     * This operation deletes a passphrase from the keystore of the device.
     *       
     */
    @WebMethod(operationName = "DeletePassphrase", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeletePassphrase")
    @RequestWrapper(localName = "DeletePassphrase", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeletePassphrase")
    @ResponseWrapper(localName = "DeletePassphraseResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeletePassphraseResponse")
    public void deletePassphrase(

        @WebParam(name = "PassphraseID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String passphraseID
    );

    /**
     * This operation returns a specific certificate from the device’s keystore.
     * 
     * Certificates are uniquely identified using certificate IDs. If no certificate is stored
     * under the requested certificate ID in the keystore, an InvalidArgVal fault is produced.
     * It shall be noted that this command does not return the private key that is associated to
     * the public key in the certificate.
     *       
     */
    @WebMethod(operationName = "GetCertificate", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCertificate")
    @RequestWrapper(localName = "GetCertificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertificate")
    @ResponseWrapper(localName = "GetCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertificateResponse")
    @WebResult(name = "Certificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public org.onvif.ver10.advancedsecurity.wsdl.X509Certificate getCertificate(

        @WebParam(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certificateID
    );

    /**
     * This operation uploads a passphrase to the keystore of the device.
     *       
     */
    @WebMethod(operationName = "UploadPassphrase", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadPassphrase")
    @RequestWrapper(localName = "UploadPassphrase", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadPassphrase")
    @ResponseWrapper(localName = "UploadPassphraseResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadPassphraseResponse")
    @WebResult(name = "PassphraseID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String uploadPassphrase(

        @WebParam(name = "Passphrase", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String passphrase,
        @WebParam(name = "PassphraseAlias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String passphraseAlias
    );

    /**
     * This operation deletes a certificate revocation list (CRL) from the keystore on the device.
     * Certification revocation lists are uniquely identified using CRLIDs. If no CRL is stored
     * under the requested CRLID, the device shall produce a CRLID fault.
     * If a reference exists for the specified CRL, the device shall produce a ReferenceExists
     * fault and shall not delete the CRL.
     * After a CRL has been successfully deleted, a device may assign its former ID to other CRLs.
     *       
     */
    @WebMethod(operationName = "DeleteCRL", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCRL")
    @RequestWrapper(localName = "DeleteCRL", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCRL")
    @ResponseWrapper(localName = "DeleteCRLResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCRLResponse")
    public void deleteCRL(

        @WebParam(name = "CrlID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String crlID
    );

    /**
     * This operation returns a certification path validation policy from the keystore on the
     * device.
     * Certification path validation policies are uniquely identified using certification path
     * validation policy IDs. If no certification path validation policy is stored under the
     * requested certification path validation policy ID, the device shall produce a
     * CertPathValidationPolicyID fault.
     *       
     */
    @WebMethod(operationName = "GetCertPathValidationPolicy", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCertPathValidationPolicy")
    @RequestWrapper(localName = "GetCertPathValidationPolicy", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertPathValidationPolicy")
    @ResponseWrapper(localName = "GetCertPathValidationPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertPathValidationPolicyResponse")
    @WebResult(name = "CertPathValidationPolicy", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public org.onvif.ver10.advancedsecurity.wsdl.CertPathValidationPolicy getCertPathValidationPolicy(

        @WebParam(name = "CertPathValidationPolicyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certPathValidationPolicyID
    );

    /**
     * This operation deletes a key from the device’s keystore.
     * 
     * Keys are uniquely identified using key IDs. If no key is stored under the requested key ID
     * in the keystore, a device shall produce an InvalidArgVal fault.
     * If a reference exists for the specified key, a device shall produce the corresponding fault
     * and shall not delete the key.
     * If there is a key under the requested key ID stored in the keystore and the key could not be
     * deleted, a device shall produce a KeyDeletion fault.
     * If the key has the status generating, a device shall abort the generation of the key and
     * delete from the keystore all data generated for this key.
     * After a key is successfully deleted, the device may assign its former ID to other keys.
     *       
     */
    @WebMethod(operationName = "DeleteKey", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteKey")
    @RequestWrapper(localName = "DeleteKey", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteKey")
    @ResponseWrapper(localName = "DeleteKeyResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteKeyResponse")
    public void deleteKey(

        @WebParam(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyID
    );

    /**
     * This operation returns whether a key pair contains a private key.
     * 
     * Keys are uniquely identified using key IDs. If no key is stored under the requested key ID
     * in the keystore or the key identified by the requested key ID does not identify a key pair,
     * the device shall produce an InvalidKeyID fault.
     * Otherwise, this operation returns true if the key pair identified by the key ID contains a
     * private key, and false otherwise.
     *       
     */
    @WebMethod(operationName = "GetPrivateKeyStatus", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetPrivateKeyStatus")
    @RequestWrapper(localName = "GetPrivateKeyStatus", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetPrivateKeyStatus")
    @ResponseWrapper(localName = "GetPrivateKeyStatusResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetPrivateKeyStatusResponse")
    @WebResult(name = "hasPrivateKey", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public boolean getPrivateKeyStatus(

        @WebParam(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyID
    );

    /**
     * This operation returns the IDs of all certification paths that are stored in the device’s
     * keystore.
     * 
     * This operation may be used, e.g., if a client lost track of which certificates are present
     * on the device.
     * If no certification path is stored on the device, an empty list is returned.
     *       
     */
    @WebMethod(operationName = "GetAllCertificationPaths", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCertificationPaths")
    @RequestWrapper(localName = "GetAllCertificationPaths", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertificationPaths")
    @ResponseWrapper(localName = "GetAllCertificationPathsResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertificationPathsResponse")
    @WebResult(name = "CertificationPathID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<java.lang.String> getAllCertificationPaths()
;

    /**
     * This operation returns a specific certification path from the device’s keystore.
     * 
     * Certification paths are uniquely identified using certification path IDs.
     * If no certification path is stored under the requested ID in the keystore, an InvalidArgVal
     * fault is produced.
     *       
     */
    @WebMethod(operationName = "GetCertificationPath", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetCertificationPath")
    @RequestWrapper(localName = "GetCertificationPath", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertificationPath")
    @ResponseWrapper(localName = "GetCertificationPathResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetCertificationPathResponse")
    @WebResult(name = "CertificationPath", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public org.onvif.ver10.advancedsecurity.wsdl.CertificationPath getCertificationPath(

        @WebParam(name = "CertificationPathID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certificationPathID
    );

    /**
     * This operation returns the IDs of all certificates that are stored in the device’s keystore.
     * 
     * This operation may be used, e.g., if a client lost track of which certificates are present
     * on the device.
     * If no certificate is stored in the device’s keystore, an empty list is returned.
     *       
     */
    @WebMethod(operationName = "GetAllCertificates", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCertificates")
    @RequestWrapper(localName = "GetAllCertificates", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertificates")
    @ResponseWrapper(localName = "GetAllCertificatesResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCertificatesResponse")
    @WebResult(name = "Certificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<org.onvif.ver10.advancedsecurity.wsdl.X509Certificate> getAllCertificates()
;

    /**
     * This operation creates a certification path validation policy.
     * Certification path validation policies are uniquely identified using certification path
     * validation policy IDs. The device shall generate a new certification path validation policy
     * ID for the created certification path validation policy.
     * For the certification path validation parameters that are not represented in the
     * certPathValidationParameters data type, the device shall use the default values specified in
     * Sect. 3.
     * If the device does not have enough storage capacity for storing the certification path
     * validation policy to be created, the device shall produce a maximum number of certification
     * path validation policies reached fault and shall not create a certification path validation
     * policy.
     * If there is at least one trust anchor certificate ID in the request for which there exists
     * no certificate in the device’s keystore, the device shall produce a CertificateID fault and
     * shall not create a certification path validation policy.
     * If the device cannot process the supplied certification path validation parameters, the
     * device shall produce a CertPathValidationParameters fault and shall not create a
     * certification path validation policy.
     *       
     */
    @WebMethod(operationName = "CreateCertPathValidationPolicy", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateCertPathValidationPolicy")
    @RequestWrapper(localName = "CreateCertPathValidationPolicy", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateCertPathValidationPolicy")
    @ResponseWrapper(localName = "CreateCertPathValidationPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateCertPathValidationPolicyResponse")
    @WebResult(name = "CertPathValidationPolicyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String createCertPathValidationPolicy(

        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(name = "Parameters", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.CertPathValidationParameters parameters,
        @WebParam(name = "TrustAnchor", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.util.List<org.onvif.ver10.advancedsecurity.wsdl.TrustAnchor> trustAnchor,
        @WebParam(name = "anyParameters", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.CreateCertPathValidationPolicy.AnyParameters anyParameters
    );

    /**
     * This operation deletes a certification path validation policy from the keystore on the
     * device.
     * Certification path validation policies are uniquely identified using certification path
     * validation policy IDs. If no certification path validation policy is stored under the
     * requested certification path validation policy ID, the device shall produce an
     * InvalidCertPathValidationPolicyID fault.
     * If a reference exists for the requested certification path validation policy, the device
     * shall produce a ReferenceExists fault and shall not delete the certification path validation
     * policy.
     * After the certification path validation policy has been deleted, the device may assign its
     * former ID to other certification path validation policies.
     *       
     */
    @WebMethod(operationName = "DeleteCertPathValidationPolicy", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/DeleteCertPathValidationPolicy")
    @RequestWrapper(localName = "DeleteCertPathValidationPolicy", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertPathValidationPolicy")
    @ResponseWrapper(localName = "DeleteCertPathValidationPolicyResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.DeleteCertPathValidationPolicyResponse")
    public void deleteCertPathValidationPolicy(

        @WebParam(name = "CertPathValidationPolicyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certPathValidationPolicyID
    );

    /**
     * This operation uploads a certification path consisting of X.509 certificates as specified by
     * [RFC 5280] in DER encoding along with a private key to a device’s keystore.
     * Certificates and private key are supplied in the form of a PKCS#12 file as specified in
     * [PKCS#12].
     * 
     * The device shall support PKCS#12 files that contain the following safe bags:
     * 
     * * one or more instances of CertBag [PKCS#12, Sect. 4.2.3]
     * * either exactly one instance of KeyBag [PKCS#12, Sect. 4.3.1] or exactly one instance of
     * PKCS8ShroudedKeyBag [PKCS#12, Sect. 4.2.2].
     * 
     * If the IgnoreAdditionalCertificates parameter has the value true, the device shall behave as
     * if the client had supplied only the first CertBag in the sequence of CertBag instances.
     * The device shall support PKCS#12 passphrase integrity mode for integrity protection of the
     * PKCS#12 PFX as specified in [PKCS#12, Sect. 4].
     * The device shall support PKCS8ShroudedKeyBags that are encrypted with the same passphrase as
     * the CertBag instances.
     * If an integrity passphrase ID is supplied, the device shall use the corresponding passphrase
     * in the keystore to check the integrity of the supplied PKCS#12 PFX.
     * If an integrity passphrase ID is supplied, but the supplied PKCS#12 PFX has no integrity
     * protection, the device shall produce a BadPKCS12File fault and shall
     * not store the uploaded certificates nor the uploaded key pair in the keystore.
     * If an encryption passphrase ID is supplied, the device shall use the corresponding
     * passphrase in the keystore to decrypt the PKCS8ShroudedKeyBag and the CertBag instances.
     * If an EncryptionPassphraseID is supplied, but a CertBag is not encrypted, the device shall
     * ignore the supplied EncryptionPassphraseID when processing this CertBag.
     * If an EncryptionPassphraseID is supplied, but a KeyBag is provided instead of a
     * PKCS8ShroudedKeyBag, the device shall ignore the supplied EncryptionPassphraseID when
     * processing the KeyBag.
     *       
     */
    @WebMethod(operationName = "UploadCertificateWithPrivateKeyInPKCS12", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/UploadCertificateWithPrivateKeyInPKCS12")
    @RequestWrapper(localName = "UploadCertificateWithPrivateKeyInPKCS12", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCertificateWithPrivateKeyInPKCS12")
    @ResponseWrapper(localName = "UploadCertificateWithPrivateKeyInPKCS12Response", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.UploadCertificateWithPrivateKeyInPKCS12Response")
    public void uploadCertificateWithPrivateKeyInPKCS12(

        @WebParam(name = "CertWithPrivateKey", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        byte[] certWithPrivateKey,
        @WebParam(name = "CertificationPathAlias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String certificationPathAlias,
        @WebParam(name = "KeyAlias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyAlias,
        @WebParam(name = "IgnoreAdditionalCertificates", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.Boolean ignoreAdditionalCertificates,
        @WebParam(name = "IntegrityPassphraseID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String integrityPassphraseID,
        @WebParam(name = "EncryptionPassphraseID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String encryptionPassphraseID,
        @WebParam(name = "Passphrase", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String passphrase,
        @WebParam(mode = WebParam.Mode.OUT, name = "CertificationPathID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<java.lang.String> certificationPathID,
        @WebParam(mode = WebParam.Mode.OUT, name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.ws.Holder<java.lang.String> keyID
    );

    /**
     * This operation returns all certificate revocation lists (CRLs) that are stored in the
     * keystore on the device.
     * If no certificate revocation list is stored in the device’s keystore, an empty list is
     * returned.
     *       
     */
    @WebMethod(operationName = "GetAllCRLs", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/GetAllCRLs")
    @RequestWrapper(localName = "GetAllCRLs", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCRLs")
    @ResponseWrapper(localName = "GetAllCRLsResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.GetAllCRLsResponse")
    @WebResult(name = "Crl", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.util.List<org.onvif.ver10.advancedsecurity.wsdl.CRL> getAllCRLs()
;

    /**
     * This operation generates for a public key on the device a self-signed X.509 certificate that
     * complies to RFC 5280.
     * 
     * The X509Version parameter specifies the version of X.509 that the generated certificate
     * shall comply to.
     * A device that supports this command shall support the generation of X.509v3 certificates as
     * specified in RFC 5280 and may additionally be able to handle other X.509 certificate formats
     * as indicated by the X.509Versions capability.
     * 
     * The key pair that contains the public key for which a self-signed certificate shall be
     * produced is specified by its key pair ID.
     * The subject parameter describes the entity that the public key belongs to.
     * If the key pair does not have status ok, a device shall produce an InvalidKeyStatus fault
     * and no certificate shall be generated.
     * 
     * The signature algorithm parameter determines which signature algorithm shall be used for
     * signing the certification request with the public key specified by the key ID parameter.
     * A device that supports this command shall as minimum support the sha-1WithRSAEncryption
     * signature algorithm as specified in RFC 3279.
     * The Extensions parameter specifies potential X509v3 extensions that shall be contained in
     * the certificate.
     * A device that supports this command shall support the extensions that are defined in [RFC
     * 5280], Sect. 4.2] as mandatory for CAs that issue self-signed certificates.
     * 
     * 
     * Certificates are uniquely identified using certificate IDs. If the command was successful,
     * the device generates a new ID for the generated certificate and returns this ID.
     * 
     * If the device does not have not enough storage capacity for storing the certificate to be
     * created, the maximum number of certificates reached fault shall be produced and no
     * certificate shall be generated.
     *       
     */
    @WebMethod(operationName = "CreateSelfSignedCertificate", action = "http://www.onvif.org/ver10/advancedsecurity/wsdl/CreateSelfSignedCertificate")
    @RequestWrapper(localName = "CreateSelfSignedCertificate", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateSelfSignedCertificate")
    @ResponseWrapper(localName = "CreateSelfSignedCertificateResponse", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl", className = "org.onvif.ver10.advancedsecurity.wsdl.CreateSelfSignedCertificateResponse")
    @WebResult(name = "CertificateID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
    public java.lang.String createSelfSignedCertificate(

        @WebParam(name = "X509Version", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.math.BigInteger x509Version,
        @WebParam(name = "Subject", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.DistinguishedName subject,
        @WebParam(name = "KeyID", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String keyID,
        @WebParam(name = "Alias", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.lang.String alias,
        @WebParam(name = "notValidBefore", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.datatype.XMLGregorianCalendar notValidBefore,
        @WebParam(name = "notValidAfter", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        javax.xml.datatype.XMLGregorianCalendar notValidAfter,
        @WebParam(name = "SignatureAlgorithm", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        org.onvif.ver10.advancedsecurity.wsdl.AlgorithmIdentifier signatureAlgorithm,
        @WebParam(name = "Extension", targetNamespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl")
        java.util.List<org.onvif.ver10.advancedsecurity.wsdl.X509V3Extension> extension
    );
}
