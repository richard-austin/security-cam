package security.cam

import grails.gorm.transactions.Transactional
import grails.util.Environment
import org.apache.commons.io.FileUtils
import security.cam.enums.PassFail
import security.cam.interfaceobjects.ObjectCommandResponse
import server.Camera
import server.Stream

@Transactional
class ConfigurationUpdateService {
    CamService camService
    Sc_processesService sc_processesService
    LogService logService

    /**
     * generateConfigs: Update all configuration files from the current cameras.json file. (cameras_dev.json in development mode)
     * @return ObjectCommandResponse indicating success or failure.
     */
    def generateConfigs() {
        ObjectCommandResponse response = new ObjectCommandResponse()
        try {
            // Stop sc_processes.sh before updating the config
            sc_processesService.stopProcesses()

            int retryCount = 200
            while (sc_processesService.isRunning()) {
                if (--retryCount <= 0)
                    throw new Exception("Unable to stop sc_processes service")

                Thread.sleep(20)
            }

            Thread.sleep(300)  // Give it time to stop

            // Clear out the existing motion config files before we regenerate them.
            FileUtils.cleanDirectory(new File("/home/security-cam/motion/conf.d"))
            // TODO: Must change these hard coded references to configured ones.

            response = camService.getCameras()

            Map<String, Camera> jsonObj = response.responseObject as Map<String, Camera>

            UpdateMotionConfig(jsonObj)

            // Update sc_processes.sh
            UpdateScProcesses(jsonObj)
            sc_processesService.startProcesses()
            Thread.sleep(300)  // Give it time to stop
        }
        catch (Exception ex) {
            logService.cam.error "Exception in generateConfigs: " + ex.getMessage()
            response.status = PassFail.FAIL
            response.error = ex.getMessage()
        }

        return response
    }

    /**
     * UpdateMotionConfig: Replace the motion config files with new ones
     *                     generated from the current cameras.json file.
     * @param jsonObj : json object created from the cameras.json file
     * @return: void
     */
    static private UpdateMotionConfig(Map<String, Camera> jsonObj) {
        int camId = 100
        int streamNum = 1
        jsonObj.each { it ->
            Camera cam = it.value
            cam.streams.each { streamIt ->
                Stream stream = streamIt.value
                if (stream.motion != null) {
                    String motionConf =
                            """
# /home/security-cam/motion/conf.d/${it.key}.conf
#
# This config file was generated by security-cam

###########################################################
# Configuration options specific to camera 1
############################################################

# This name is the key for the data of the camera on which a recording will be triggered.
#  Normally only the lower definition stream would be connected to motion to keep CPU utilisation
#  low, and this information enables motion to trigger a recording on the HD stream using the
#  the start_hd_recording.sh script
camera_name ${stream.motion.trigger_recording_on}

# Mask to exclude public areas
${stream.motion?.mask_file ? "mask_file $stream.motion.mask_file" : "; mask_file"}

# Numeric identifier for the camera.
camera_id ${++camId}

# The full URL of the network camera stream.
netcam_url ${stream.netcam_uri}
# netcam_url rtmp://localhost/livelo/porch

# Image width in pixels.
width $stream.video_width

# Image height in pixels.
height $stream.video_height

# Text to be overlayed in the lower left corner of images
text_left $cam.name

# Target directory for pictures, snapshots and movies
target_dir /home/security-cam/$stream.recording.location

# File name(without extension) for movies relative to target directory
movie_filename ${streamNum < 10 ? "cam0" : "cam"}${streamNum}_%t-%v-%s

framerate 3

movie_extpipe_use off
; movie_extpipe ffmpeg -y -f rawvideo -pix_fmt yuv420p -video_size %wx%h -framerate %fps -i pipe:0 -vcodec libx264 -preset ultrafast -level 3.0 -start_number 0 -hls_time 5.0 -hls_list_size 0 -f hls %f.m3u8

movie_passthrough on
; movie_codec mp4
"""
                    FileWriter writer = new FileWriter("/home/security-cam/motion/conf.d/${it.key}.conf")
                    //TODO: Must change these hard coded references to configured ones.
                    writer.write(motionConf)
                    writer.close()
                }
                ++streamNum
            }
        }

    }

    /**
     * UpdateScProcesses: Create a new sc_processes.sh file from the cameras.json file and replace any existing one with it
     * @param jsonObj : json object created from the cameras.json file
     * @return: void
     */
    static private UpdateScProcesses(Map<String, Camera> jsonObj) {
        // Remove the current sc_processes.sh file
//        File scProcs = new File("/etc/security-cam/sc_processes.sh") // TODO: Must change these hard coded references to configured ones.
//        scProcs.delete()


        String scProcsTxt =
                """#!/bin/bash

log_dir=/home/security-cam/logs/
ipV4RegEx="^([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))\\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))\\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))\\.([0-9]|[1-9][0-9]|1([0-9][0-9])|2([0-4][0-9]|5[0-5]))\$"

read_ip() {
    read -r last_ip </home/security-cam/myip

    current_reading=\$(curl -s 'https://api.ipify.org/?format=json' | python3 -c "import sys, json; print(json.load(sys.stdin)['ip'])")

    if [[ \$current_reading =~ \$ipV4RegEx  ]]; then
      current_ip=\${current_reading}
    else
      echo "\$(date +%d-%m-%Y" "%T): Bad reading (\${current_reading}) from https://api.ipify.org" >>"\${log_dir}ipify_\$(date +%Y%m%d)".log
    fi

    # The myip file is updated when the user uses the Save Current IP option in the web application
    #  in response to the email sent here
}

kill_descendant_processes() {
    local pid="\$1"
    local and_self="\${2: -false}"
    if children="\$(pgrep -P "\$pid")"; then
        for child in \$children; do
            kill_descendant_processes "\$child" true
        done
    fi
    if [[ "\$and_self" == true ]]; then
        kill -TERM "\$pid"
    fi
}

run_check_ip_not_changed() {
  while true; do
    sleep 15m
    read_ip

    while [ "\$current_ip" != "\$last_ip" ]; do
      ## Send the email with the ssmtp command
      ssmtp richard.david.austin@gmail.com <<EOT
From: "Raspberry pi" <rdaustin@virginmedia.com>
Subject: Change of public IP address

Hi Richard,

I have detected a change of Virgin Media broadband IP address, this is now https://\${current_ip}

Please go to the web application at the new address and use the "Save Current Public IP" option  on the General menu to stop these emails continuing to be sent.

Thanks

Raspberry pi
EOT
      sleep 60m
      read_ip
    done
  done
}

run_ffmpeg() {
  while true; do
    /usr/bin/ffmpeg -hide_banner -loglevel error -stimeout 1000000 -rtsp_transport tcp -i "\$1" -an -c copy -f flv "\$2" 2>>"\${log_dir}ffmpeg_\"\$3\"_\$(date +%Y%m%d)".log
    sleep 1
    echo "ffmpeg terminated at \$(date +%d-%m-%Y" "%T)" >>"\${log_dir}ffmpeg_\"\$3\"_\$(date +%Y%m%d)".log
  done
}

run_nms() {
  while true; do
    /usr/bin/node /etc/security-cam/nms/app.js
    sleep 1
  done
}

run_motion() {
  while true; do
    /usr/bin/motion
    sleep 1
  done
}

run_nms &
run_motion &
"""

        // Add an ffmpeg call for each camera stream
        jsonObj.each { it ->
            Camera cam = it.value

            cam.streams.each { streamIt ->
                Stream stream = streamIt.value
                scProcsTxt +=
                        "run_ffmpeg \"$stream.netcam_uri\" \"$stream.nms_uri\" \"${cam.name.replace(" ", "_") + "_" + stream.descr.replace(" ", "_").replace(".", "")}\" &\n"
            }
        }

        scProcsTxt +=
                """
run_check_ip_not_changed &

trap 'kill_descendant_processes \$\$' INT EXIT TERM
wait
"""
        String path = ""  //TODO: Must change these hard coded references to configured ones.
        if (Environment.current.name == 'development')
            path = "../xtrn-scripts-and-config/sc_processes.sh"
        else if (Environment.current.name == 'production')
            path = "/home/security-cam/sc_processes.sh"

        FileWriter writer = new FileWriter(path)
        writer.write(scProcsTxt)
        writer.close()

    }
}
