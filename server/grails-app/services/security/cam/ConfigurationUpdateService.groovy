package security.cam

import grails.converters.JSON
import grails.gorm.transactions.Transactional
import org.apache.commons.io.FileUtils
import security.cam.enums.PassFail
import security.cam.interfaceobjects.ObjectCommandResponse
import server.Camera

@Transactional
class ConfigurationUpdateService {
    CamService camService
    LogService logService

    def parseConfig() {
        ObjectCommandResponse response = new ObjectCommandResponse()
        try
        {
            // Clear out the existing motion config files before we regenerate them.
            FileUtils.cleanDirectory(new File("/home/security-cam/motion/conf.d"))

            response = camService.getCameras()

            Map<String, Camera> jsonObj = response.responseObject as Map<String, Camera>
            int camId = 100
            int camNum = 1
            jsonObj.each { it ->
                Camera cam = it.value
                if(cam.motion != null) {
                    String conf =
"""
# /home/security-cam/motion/conf.d/${it.key}.conf
#
# This config file was generated by security-cam

###########################################################
# Configuration options specific to camera 1
############################################################

# This name is the key for the data of the camera on which a recording will be triggered.
#  Normally only the lower definition stream would be connected to motion to keep CPU utilisation 
#  low, and this information enables motion to trigger a recording on the HD stream using the
#  the start_hd_recording.sh script
camera_name ${cam.motion.trigger_recording_on}

# Mask to exclude public areas
${cam.motion?.mask_file ? "mask_file $cam.motion.mask_file" : "; mask_file"}

# Numeric identifier for the camera.
camera_id ${++camId}

# The full URL of the network camera stream.
netcam_url ${cam.netcam_uri}
# netcam_url rtmp://localhost/livelo/porch

# Image width in pixels.
width $cam.video_width

# Image height in pixels.
height $cam.video_height

# Text to be overlayed in the lower left corner of images
text_left $cam.name

# Target directory for pictures, snapshots and movies
target_dir /home/security-cam/$cam.recording.location

# File name(without extension) for movies relative to target directory
movie_filename ${camNum < 10 ? "cam0" : "cam"}${camNum}_%t-%v-%s

framerate 3

movie_extpipe_use off
; movie_extpipe ffmpeg -y -f rawvideo -pix_fmt yuv420p -video_size %wx%h -framerate %fps -i pipe:0 -vcodec libx264 -preset ultrafast -level 3.0 -start_number 0 -hls_time 5.0 -hls_list_size 0 -f hls %f.m3u8

movie_passthrough on
; movie_codec mp4
"""
                    FileWriter writer = new FileWriter("/home/security-cam/motion/conf.d/${it.key}.conf")
                    writer.write(conf)
                    writer.close()
                }
                ++camNum
            }
        }
        catch (Exception ex)
        {
            logService.cam.error "Exception in config parser: " + ex.getMessage()
            response.status = PassFail.FAIL
            response.error = ex.getMessage()
        }

        return response
    }
}
