package security.cam

import grails.core.GrailsApplication
import grails.gorm.transactions.Transactional
import security.cam.enums.PassFail
import security.cam.interfaceobjects.ObjectCommandResponse

class Temperature
{
    Temperature(String temp)
    {
        this.temp = temp
    }

    String temp
}

class Version
{
    Version(String version)
    {
        this.version = version
    }

    String version
}

@Transactional
class UtilsService {
    LogService logService
    GrailsApplication grailsApplication

    /**
     * executeLinuxCommand: Execute a linux command
     * @param command the command and its parameters as a string
     * @return: The returned value
     */
    String executeLinuxCommand(String command)
    {
        Process p = Runtime.getRuntime().exec(command)
        p.waitFor()

        BufferedReader reader =
                new BufferedReader(new InputStreamReader(p.getInputStream()))
        StringBuffer sb = new StringBuffer()
        String line
        while ((line = reader.readLine()) != null) {
            sb.append(line + "\n")
        }

        return sb.toString()
    }

    /**
     *getTemperature: Get the core temperature (Raspberry pi only). This is called at intervals to keep the session alive
     * @return: The temperature as a string. On non Raspberry pi systems an error is returned.
     */
    def getTemperature() {
        ObjectCommandResponse result = new ObjectCommandResponse()
        try {
            Temperature temp  = new Temperature(executeLinuxCommand("vcgencmd measure_temp"))
            result.responseObject = temp
        }
        catch(Exception ex)
        {
            logService.cam.error("Exception in getTemperature: "+ex.getCause()+ ' ' + ex.getMessage())
            result.status = PassFail.FAIL
            result.error = ex.getMessage()
        }
        return result
    }

    /**
     * getVersion: Get the version from the config file application.yml. This version is generated by
     *             by git describe --tags
     * @return: The version string
     */
    def getVersion() {
        ObjectCommandResponse result = new ObjectCommandResponse()
        try {
            Version ver = new Version(grailsApplication.config.info.app.securityCamVersion)
            result.responseObject =  ver
        }
        catch(Exception ex)
        {
            logService.cam.error("Exception in getVersion: "+ex.getCause()+ ' ' + ex.getMessage())
            result.status = PassFail.FAIL
            result.error = ex.getMessage()
        }
        return result
    }
}
